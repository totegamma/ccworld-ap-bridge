// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/redis/go-redis/v9"
	"github.com/totegamma/concurrent/x/activitypub"
	"github.com/totegamma/concurrent/x/association"
	"github.com/totegamma/concurrent/x/auth"
	"github.com/totegamma/concurrent/x/domain"
	"github.com/totegamma/concurrent/x/entity"
	"github.com/totegamma/concurrent/x/message"
	"github.com/totegamma/concurrent/x/stream"
	"github.com/totegamma/concurrent/x/util"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func SetupAuthService(db *gorm.DB, config util.Config) *auth.Service {
	repository := entity.NewRepository(db)
	service := entity.NewService(repository, config)
	domainRepository := domain.NewRepository(db)
	domainService := domain.NewService(domainRepository)
	authService := auth.NewService(config, service, domainService)
	return authService
}

func SetupActivitypubHandler(db *gorm.DB, rdb *redis.Client, config util.Config, apConfig activitypub.APConfig) *activitypub.Handler {
	repository := activitypub.NewRepository(db)
	messageRepository := message.NewRepository(db)
	streamRepository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository, config)
	streamService := stream.NewService(rdb, streamRepository, service, config)
	messageService := message.NewService(rdb, messageRepository, streamService)
	associationRepository := association.NewRepository(db)
	associationService := association.NewService(rdb, associationRepository, streamService, messageService)
	handler := activitypub.NewHandler(repository, rdb, messageService, associationService, config, apConfig)
	return handler
}
